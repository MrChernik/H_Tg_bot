#!/usr/bin/env python
import telebot #–ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞—Ç—å, —Ç–æ —Å –Ω–µ–≥–æ
from telebot import types
from telebot.types import LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
import config #–ë–æ—Ç, –º–∞–≥–∞–∑–∏–Ω, –∫–ª—é—á –Æ–∫–∞—Å—Å—ã
import re
import os
import docx #–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
from docx.shared import Mm #–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π –≤ –≤–æ—Ä–¥–µ
from docx.enum.text import WD_BREAK
import json #–ó–¥–µ—Å—å –ë–î —Å –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ
import threading #–î–ª—è –ø–æ—Ç–æ–∫–æ–≤
import datetime
import time
from yookassa import Configuration,Payment
import uuid 
import concurrent.futures
import asyncio #–î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π


#ThreadPoolExecutor —Å –æ–¥–Ω–∏–º(!) —Ä–∞–±–æ—á–∏–º –ø–æ—Ç–æ–∫–æ–º
executor = concurrent.futures.ThreadPoolExecutor(max_workers=1)

bot = telebot.TeleBot(config.TOKEN)
print('–£—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...')

#f = open('/var/www/v/data/h_tg/ADList', 'r')
#bestID = [int(line.strip()) for line in f]
#f.close()

#–î–ª—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ APIv3 –æ—Ç –Æ–∫–∞—Å—Å—ã
Configuration.account_id = '–•–•–•–•–•–•'
Configuration.secret_key = '–•–•–•–•–•–•'

#===============================================================================================================
@bot.message_handler(commands = ['start'])

def start(message):
    f = open('/var/www/v/data/h_tg/ADList', 'r')
    bestID = [int(line.strip()) for line in f]
    f.close()
    if message.from_user.id in bestID:
        markup = types.ReplyKeyboardMarkup(True, True)
        obedzd = types.KeyboardButton("\U0001F4D5–ó–∞–∫–∞–∑–Ω—ã–µ –æ–±–µ–¥–Ω–∏ –æ –∑–¥—Ä–∞–≤–∏–∏")
        proszd = types.KeyboardButton("\U0001F4D7–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏–∏ –æ –∑–¥—Ä–∞–≤–∏–∏")
        obedup = types.KeyboardButton("\U0001F4D3–ó–∞–∫–∞–∑–Ω—ã–µ –æ–±–µ–¥–Ω–∏ –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏")
        prosup = types.KeyboardButton("\U0001F4D4–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏–∏ –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏")
        dellall = types.KeyboardButton("\U0001F5D1–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∫–∏")
        wordmaker = types.KeyboardButton("\U0001F4E9–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Word-—Ñ–∞–π–ª")
        addAd = types.KeyboardButton("\U0001F91D–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
        delAd = types.KeyboardButton("\U0001F480–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")

        markup.add(wordmaker)
        markup.row(obedzd, obedup)
        markup.row(proszd, prosup)
        markup.add(dellall)

        if message.from_user.id==–•–•–•–•–•–•–•–•–•–•–•: markup.row(addAd, delAd)

        text_of_message = f'<b>–û—Ç–∫—Ä—ã—Ç–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é.\n–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?</b>'
        send = bot.send_message(message.chat.id, text_of_message, parse_mode='html',reply_markup=markup)

    else:
        markup = types.ReplyKeyboardMarkup(True, True)
        obedzd = types.KeyboardButton("\U0001F9FE–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ –∑–¥—Ä–∞–≤–∏–∏")
        proszd = types.KeyboardButton("\U0001F9FE–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ –∑–¥—Ä–∞–≤–∏–∏")
        obedup = types.KeyboardButton("\U0001F4DC–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏")
        prosup = types.KeyboardButton("\U0001F4DC–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏")
        markup.row(obedzd, obedup)
        markup.row(proszd, prosup)

        with open('/var/www/v/data/h_tg/bz.json', 'r') as json_file:
            a = json.load(json_file)
            
            #–ï—Å–ª–∏ –∑–∞ —ç—Ç–∏–º –¢–ì–∞–π–¥–∏ –µ—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä, –Ω–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç —Å—É–º–º—ã:
        if (str(message.from_user.id)  in a) and (a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["payed"] == False): 
            cash=a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["OZ"]["cash"]+a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["OU"]["cash"]+a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["PZ"]["cash"]+a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["PU"]["cash"]
            #–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞
            if cash < 10:
                emomessage = '\U0000274C'
            else:
                emomessage = '\U00002705'
            emomessage += "\U0001F4B8–û–ø–ª–∞—Ç–∏—Ç—å ("+str(cash)+" ‚ÇΩ)"
            payday = types.KeyboardButton(emomessage)
            markup.add(payday)
            text_of_message = '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é –∑–∞–ø–∏—Å–∫—É –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ'
        else: #–ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:
            text_of_message = f'<b>–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞–ø–∏—Å–∫—É –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é –õ–∏—Ç—É—Ä–≥–∏—é</b>\n–ö–∞–∂–¥—ã–π –¥–µ–Ω—å <u>–¥–æ 07. 00</u>\n\n–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –õ–∏—Ç—É—Ä–≥–∏–π —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª–µ —Ö—Ä–∞–º–∞: <b>t.me/ierEdesiy</b>'
        #–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send = bot.send_message(message.chat.id, text_of_message, parse_mode='html',reply_markup=markup)


#===============================================================================================================
#–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
@bot.pre_checkout_query_handler(lambda query: True)
def pre_checkout_query(pre_checkout_q: telebot.types.PreCheckoutQuery):
    print(pre_checkout_q)
    bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)

@bot.message_handler(content_types=['successful_payment'])
def successful_payment(message):
    print('message_handler')
    bot.send_message(message.chat.id, f"\U0001F4BC–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞.", parse_mode='html')
    with open('/var/www/v/data/h_tg/bz.json', 'r') as json_file:
        a = json.load(json_file)
    chat_id = str(message.from_user.id)
    #–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ "chat_id", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    a[chat_id][str(a[chat_id]["counter"])]["payed"] = True

    with open('/var/www/v/data/h_tg/bz.json', 'w', encoding='utf-8') as json_file:
        json.dump(a, json_file, ensure_ascii=False, indent=4)
    message.text =='/start'
    start(message)




@bot.message_handler(content_types=['text'])
def get_text_messages(message):
    supervizor= [–•–•–•–•–•–•,–•–•–•–•–•–•–•]
    #—á—Ç–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–æ–≤
    f = open('/var/www/v/data/h_tg/ADList', 'r')
    bestID = [int(line.strip()) for line in f]
    f.close()
    global choice
    dir_mass=['OZ','OU','PU','PZ']
    #–æ—Ç—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –º–µ–Ω—é
    if (message.from_user.id in bestID)and(message.text == "\U0001F4E9–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Word-—Ñ–∞–π–ª")or(message.text == '\U0001F4D5–ó–∞–∫–∞–∑–Ω—ã–µ –æ–±–µ–¥–Ω–∏ –æ –∑–¥—Ä–∞–≤–∏–∏')or(message.text == '\U0001F4D7–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏–∏ –æ –∑–¥—Ä–∞–≤–∏–∏')or(message.text == '\U0001F4D3–ó–∞–∫–∞–∑–Ω—ã–µ –æ–±–µ–¥–Ω–∏ –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏')or(message.text == '\U0001F4D4–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏–∏ –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏'):

        if (message.text == "\U0001F4E9–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å Word-—Ñ–∞–π–ª"):
            from docx.shared import Pt
            from docx.enum.text import WD_ALIGN_PARAGRAPH

            doc = docx.Document()
            section = doc.sections[0]
            section.page_height = Mm(210)
            section.page_width = Mm(148)
            section.left_margin = Mm(10)
            section.right_margin = Mm(10)
            section.top_margin = Mm(10)
            section.bottom_margin = Mm(10)
            # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            style = doc.styles['Normal']
            # –Ω–∞–∑–≤–∞–Ω–∏–µ —à—Ä–∏—Ñ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            style.font.name = 'Times New Roman'
            # —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            style.font.size = Pt(16)
            doc.add_heading('–ù–ê–ó–í–ê–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê –í –ó–ê–ì–û–õ–û–í–ö–ï –°–Æ–î–ê', 0)
            for i in dir_mass:
                if i == 'OZ':
                    head = doc.add_heading('–ó–∞–∫–∞–∑–Ω—ã–µ –æ–±–µ–¥–Ω–∏ –æ –∑–¥—Ä–∞–≤–∏–∏', 1)

                elif i == 'OU':
                    head = doc.add_heading('–ó–∞–∫–∞–∑–Ω—ã–µ –æ–±–µ–¥–Ω–∏ –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏', 1)

                elif i == 'PU':
                    head = doc.add_heading('–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏–∏ –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏', 1)

                elif i == 'PZ':
                    head = doc.add_heading('–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏–∏ –æ –∑–¥—Ä–∞–≤–∏–∏', 1)
                head.alignment = WD_ALIGN_PARAGRAPH.CENTER
                head.style.font.size = Pt(18)
                head.paragraph_format.space_after = Mm(5)


                outputzapisi(message,i,True,doc)

            doc.save('/var/www/v/data/h_tg/–ó–∞–ø–∏—Å–∫–∏.docx')
            with open('/var/www/v/data/h_tg/–ó–∞–ø–∏—Å–∫–∏.docx', 'rb') as repost:
                bot.send_document(message.chat.id, repost)
            repost.close()
            os.remove('–ó–∞–ø–∏—Å–∫–∏.docx')
            print('–§–∞–π–ª "–ó–∞–ø–∏—Å–∫–∏.docx" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω! üóëÔ∏è')



        else:
            if message.text == '\U0001F4D5–ó–∞–∫–∞–∑–Ω—ã–µ –æ–±–µ–¥–Ω–∏ –æ –∑–¥—Ä–∞–≤–∏–∏': example_dir = dir_mass[0]

            elif message.text == '\U0001F4D3–ó–∞–∫–∞–∑–Ω—ã–µ –æ–±–µ–¥–Ω–∏ –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏': example_dir = dir_mass[1]

            elif message.text == '\U0001F4D4–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏–∏ –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏': example_dir = dir_mass[2]

            elif message.text == '\U0001F4D7–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏–∏ –æ –∑–¥—Ä–∞–≤–∏–∏': example_dir = dir_mass[3]
            outputzapisi(message,example_dir,False,'')

    elif ('\U0000274C\U0001F4B8–û–ø–ª–∞—Ç–∏—Ç—å' in message.text): #–ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ—Ä–æ–≥ –ø–æ —Å—É–º–º–µ –µ—Å—Ç—å
        bot.send_message(message.chat.id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ—Ç–æ–∫–æ–ª—ã –¢–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å—É–º–º—É –º–µ–Ω—å—à–µ 70‚ÇΩ.\n–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∏–∑–≤–∏–Ω–µ–Ω–∏—è', parse_mode='html')
        message.text =='/start'
        start(message)
    elif ('\U00002705\U0001F4B8–û–ø–ª–∞—Ç–∏—Ç—å' in message.text):  payNOW(message) #–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞—Å—á–µ—Ç—É –∏ –æ–ø–ª–∞—Ç–µ

    elif (message.from_user.id in bestID)and(message.text == '\U0001F5D1–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∫–∏'):
        checkerJSON()
        send = bot.send_message(message.chat.id,"\U0001F9F9–û–±–Ω—É–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", parse_mode='html')
        message.text =='/start'
        start(message)

    elif (message.from_user.id in supervizor)and(message.from_user.id in bestID)and(message.text == '\U0001F91D–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞'):
            keyboard = types.ReplyKeyboardMarkup(True, True)
            back = types.KeyboardButton("\U0001F4DB–í–µ—Ä–Ω—É—Ç—å—Å—è")
            keyboard.add(back)
            send = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:\nID XXXXXXXXX –≥–¥–µ –≤–º–µ—Å—Ç–æ X - id –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n–ß—Ç–æ–±—ã –µ–≥–æ —É–∑–Ω–∞—Ç—å, —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç –±–æ—Ç –∫–æ–º–∞–Ω–¥—É /spravkaS',reply_markup=keyboard, parse_mode='html')

    elif (message.from_user.id in supervizor)and(message.from_user.id in bestID)and(message.text == '\U0001F480–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'):
            keyboard = types.ReplyKeyboardMarkup(True, True)
            back = types.KeyboardButton("\U0001F4DB–í–µ—Ä–Ω—É—Ç—å—Å—è")
            keyboard.add(back)
            send = bot.send_message(message.chat.id,'–í–≤–µ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:\nDEL XXXXXXXXX –≥–¥–µ –≤–º–µ—Å—Ç–æ X - id –∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –Ω—É–∂–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n–ß—Ç–æ–±—ã –µ–≥–æ —É–∑–Ω–∞—Ç—å, —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —ç—Ç–æ—Ç –±–æ—Ç –∫–æ–º–∞–Ω–¥—É /spravkaS',reply_markup=keyboard, parse_mode='html')

    elif (message.from_user.id in bestID)and(message.text == '\U0001F4DB–í–µ—Ä–Ω—É—Ç—å—Å—è'):
        message.text =='/start'
        start(message)
        
    elif (message.from_user.id in supervizor)and(message.from_user.id in bestID)and("ID" in message.text):
        try:
            q=''
            for i in range(2, len(message.text)): q+=message.text[i]
            f = open('/var/www/v/data/h_tg/ADList', 'a')
            f.write(f'\n{q}')
            f.close()
            message.text =='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –£–°–ü–ï–®–ù–û –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
            bot.send_message(message.chat.id, message.text, parse_mode='html')
            message.text =='/start'
            start(message)
        except Exception:
            message.text =='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ù–ï –ü–†–û–ò–ó–í–ï–î–ï–ù–û, –µ—Å—Ç—å –∫–∞–∫–∏–µ —Ç–æ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–æ–±—â–∏—Ç–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É'
            bot.send_message(message.chat.id, message.text, parse_mode='html')
            message.text =='/start'
            start(message)
    elif (message.from_user.id in supervizor)and(message.from_user.id in bestID)and("DEL" in message.text):
        try:
            q=''
            for i in range(3, len(message.text)): q+=message.text[i]
            with open('/var/www/v/data/h_tg/ADList') as f:
                text = f.read()
            text = text.replace(str(q), "")
            f.close()

            with open("/var/www/v/data/h_tg/ADList", "w") as f:
                f.write(text)
            f.close()
            message.text =='–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ò–°–ü–û–õ–ù–ï–ù–û, –±–æ–ª—å—à–µ –æ–Ω –Ω–µ –≤ –Ω–∞—à–µ–π –ª–æ–¥–∫–µ'

            bot.send_message(message.chat.id, message.text, parse_mode='html')
            message.text =='/start'
            start(message)
        except Exception:
            message.text =='–£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û, –µ—Å—Ç—å –∫–∞–∫–∏–µ —Ç–æ –ø—Ä–æ–±–ª–µ–º—ã, —Å–æ–æ–±—â–∏—Ç–µ –æ–± –∏–Ω—Ü–∏–¥–µ–Ω—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É'
            bot.send_message(message.chat.id, message.text, parse_mode='html')
            message.text =='/start'
            start(message)

    #–î–õ–Ø –í–´–î–ê–ß–ò –ò–ù–§–û–†–ú–ê–¶–ò–ò –û–ë ID –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø, –ß–¢–û–ë –ú–û–ñ–ù–û –ë–´–õ–û –î–û–ë–ê–í–ò–¢–¨ –í –ê–î–ú–ò–ù–´
    elif message.text == "spravkaS":
        bot.send_message(message.chat.id, f'–í–∞—à ID {message.from_user.id}', parse_mode='html')
        message.text =='/start'
        start(message)

    #–ê–î–ú–ò–ù–ö–ê –ö–û–ù–ß–ò–õ–ê–°–¨, –¢–ï–ü–ï–†–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ô –°–ï–ì–ú–ï–ù–¢
    elif message.text == "\U0001F5C3–í –ú–ï–ù–Æ":
        message.text =='/start'
        start(message)

    elif (message.text == '\U0001F9FE–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ –∑–¥—Ä–∞–≤–∏–∏')or(message.text == '\U0001F9FE–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ –∑–¥—Ä–∞–≤–∏–∏')or(message.text == '\U0001F4DC–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏')or(message.text == '\U0001F4DC–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏'):

        choice=message.text
        #–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –æ–¥–Ω–æ —Ç–µ–ª–æ
        if choice == '\U0001F9FE–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ –∑–¥—Ä–∞–≤–∏–∏':price=40
        elif choice == "\U0001F9FE–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ –∑–¥—Ä–∞–≤–∏–∏":price=10
        elif choice == "\U0001F4DC–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏":price=40
        elif choice == "\U0001F4DC–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏":price=10
        keyboard = types.ReplyKeyboardMarkup(True, True)
        back = types.KeyboardButton("\U0001F5C3–í –ú–ï–ù–Æ")
        keyboard.add(back)
        send = bot.send_message(message.chat.id,f'\n–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–º–µ–Ω–∞, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é\n<b>–û–¥–Ω–æ –∏–º—è - {price}‚ÇΩ</b>', reply_markup=keyboard, parse_mode='html')
        bot.register_next_step_handler(send, zapis)
    else:
        bot.send_message(message.chat.id,'–ö–∞–∫–∏–µ —Ç–æ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–≤–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n–í–æ–∑–º–æ–∂–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –≤–µ–¥—É—Ç—Å—è —Ä–∞–±–æ—Ç—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞: /start')
        message.text =='/start'
        start(message)
        
#===============================================================================================================
def outputzapisi(message,example_dir,wordw,doc):
    with open('/var/www/v/data/h_tg/bz.json', 'r') as json_file:
        a = json.load(json_file)
    if wordw:
        q=doc.add_paragraph('')
        for key in a:
            for j in a[key]:
                if j=="counter": continue
                if (a[key][j]["payed"] == True) and (a[key][j]["checked"]==False)and (a[key][j][example_dir]["List"] != []):
                    q.add_run('\n'.join(a[key][j][example_dir]["List"]))
                    q.add_run('\n')
        doc.add_page_break()

    else:
        stringa = ''
        for key in a:
            for j in a[key]:
                if j=="counter": continue
                if (a[key][j]["payed"] == True) and (a[key][j]["checked"]==False):
                    stringa =stringa+ '\n'.join(a[key][j][example_dir]["List"])
            if stringa != '': stringa = stringa+ '\n'
        if stringa == '':
            send = bot.send_message(message.chat.id,"–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç", parse_mode='html')
            message.text =='/start'
            start(message)
        else:
            keyboard = types.ReplyKeyboardMarkup(True, True)
            back = types.KeyboardButton("\U0001F4DB–í–µ—Ä–Ω—É—Ç—å—Å—è")
            keyboard.add(back)
            send = bot.send_message(message.chat.id,stringa,reply_markup=keyboard, parse_mode='html')


#===============================================================================================================

def zapis(message):
    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å–ª–∏ –ø–æ—à–µ–ª –Ω–∞–∑–∞–¥ \U0001F5C3–í –ú–ï–ù–Æ
    if message.text == "\U0001F5C3–í –ú–ï–ù–Æ":
        message.text =='/start'
        start(message)
    else:
        print(message.text)
        #–¢—è–Ω–µ–º—Å—è –∫ –≥–ª–æ–±–∞–ª—å–Ω—ã–º
        global text_of_message, text_of_message_admin, choice, SUM

        #–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ –æ–¥–Ω–æ —Ç–µ–ª–æ
        if choice == '\U0001F9FE–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ –∑–¥—Ä–∞–≤–∏–∏':
            price=40
            category = "OZ"
        elif choice == "\U0001F9FE–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ –∑–¥—Ä–∞–≤–∏–∏":
            price=10
            category = "PZ"
        elif choice == "\U0001F4DC–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏":
            price=40
            category = "OU"
        elif choice == "\U0001F4DC–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏":
            price=10
            category = "PU"

        #—Ä–∞–∑–±–∏–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏–º–µ–Ω
        listOfNames = re.split(f";|,|{chr(10)}|{chr(13)}", message.text)
        listOfNames = [x for x in listOfNames if x]
        #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–Ω–∫–æ—Å—Ç–µ–π —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
        if len(listOfNames)==1:
            text_of_message = f'–ü–æ–¥–∞–Ω–æ {len(listOfNames)} –∏–º—è'
            if choice == '\U0001F9FE–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ –∑–¥—Ä–∞–≤–∏–∏' or choice == "\U0001F4DC–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏" : text_of_message+=' –∑–∞–∫–∞–∑–Ω–æ–µ'
        elif 5>len(listOfNames)>=2 :
            text_of_message = f'–ü–æ–¥–∞–Ω–æ {len(listOfNames)} –∏–º–µ–Ω–∏'
            if choice == '\U0001F9FE–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ –∑–¥—Ä–∞–≤–∏–∏' or choice == "\U0001F4DC–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏" : text_of_message+=' –∑–∞–∫–∞–∑–Ω—ã—Ö'
        else:
            text_of_message = f'–ü–æ–¥–∞–Ω–æ {len(listOfNames)} –∏–º—ë–Ω'
            if choice == '\U0001F9FE–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ –∑–¥—Ä–∞–≤–∏–∏' or choice == "\U0001F4DC–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏" : text_of_message+=' –∑–∞–∫–∞–∑–Ω—ã—Ö'

        if choice == '\U0001F9FE–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ –∑–¥—Ä–∞–≤–∏–∏': dop=' –æ –∑–¥—Ä–∞–≤–∏–∏ –Ω–∞ –õ–∏—Ç—É—Ä–≥–∏—é.'
        elif choice == "\U0001F9FE–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ –∑–¥—Ä–∞–≤–∏–∏": dop=' –æ –∑–¥—Ä–∞–≤–∏–∏ –Ω–∞ –ø—Ä–æ—Å–∫–æ–º–∏–¥–∏—é.'
        elif choice == "\U0001F4DC–ó–∞–∫–∞–∑–Ω–∞—è –æ–±–µ–¥–Ω—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏": dop=' –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏ –Ω–∞ –õ–∏—Ç—É—Ä–≥–∏—é.'
        elif choice == "\U0001F4DC–ü—Ä–æ—Å–∫–æ–º–∏–¥–∏—è –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏": dop=' –æ —É–ø–æ–∫–æ–µ–Ω–∏–∏ –Ω–∞ –ø—Ä–æ—Å–∫–æ–º–∏–¥–∏—é.'
        text_of_message+= dop
        SUM=price*len(listOfNames)
        text_of_message+=f''
        text_of_message+=f'<b>\n<u>–°—É–º–º–∞: {SUM} ‚ÇΩ</u></b>'

        jsonPut(message,listOfNames,category,len(listOfNames),SUM)
        send = bot.send_message(message.chat.id, text_of_message, parse_mode='html')

        f = open('/var/www/v/data/h_tg/ADList', 'r')
        bestID = [int(line.strip()) for line in f]
        f.close()
        try:
            for i in bestID:
                send = bot.send_message(i, text_of_message_admin ,parse_mode='html')
        except Exception: pass

        message.text =='/start'
        start(message)




#===============================================================================================================
def payNOW(message):
    #–ê–ü–ò –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ö–ò
    # –ß—Ç–µ–Ω–∏–µ JSON-—Ñ–∞–π–ª–∞
    with open('/var/www/v/data/h_tg/bz.json', 'r') as json_file:
        a = json.load(json_file)
    cash=a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["OZ"]["cash"]+a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["OU"]["cash"]+a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["PZ"]["cash"]+a[str(message.from_user.id)][str(a[str(message.from_user.id)]["counter"])]["PU"]["cash"]
    payload = str(message.from_user.id)+'_'+ str(a[str(message.from_user.id)]["counter"])
    #–ö–ª—é—á –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞. –°—Ç–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤ –º–æ–º–µ–Ω—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞    
    idempotence_key = str(uuid.uuid4())
    payment = Payment.create({
        "amount": {
          "value": str(cash),
          "currency": "RUB"
        },
        "confirmation": {
          "type": "redirect",
          "return_url": "https://t.me/–•–•–•–•–•–•–•–•–•–•"
        },
        "capture": True,
        "description": payload
    }, idempotence_key)

    #–ò–Ω–ª–∞–π–Ω –ø–ª–∞—Ç—ë–∂
    confirmation_url = payment.confirmation.confirmation_url
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã", url=confirmation_url)
    markup.add(button)
    bot.send_message(message.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏:".format(message.from_user), reply_markup=markup)
    payment_data = json.loads(payment.json())  #–ü–æ–¥–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞—Ç–µ–∂–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ê–§ –∏ –ø–µ—Ä–µ–¥–∞—ë–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞
    result = executor.submit(asyncio.run, check_payment(message, payment_data['id'])).result()
    print('Result:', result)     #–û—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ê–§

async def check_payment(message, payment_id):
    print("checker")
    async def check(message):
        payment = json.loads((Payment.find_one(payment_id)).json())
        print(payment['status'])
        start_time = time.time()
        while time.time() - start_time < 600:
            if payment['status'] == 'pending':
                payment = json.loads((Payment.find_one(payment_id)).json())
                await asyncio.sleep(10)

            elif payment['status']=='succeeded':
                print("SUCCSESS RETURN")
                print(payment)
                bot.send_message(message.chat.id, f"\U0001F4BC–û–ø–ª–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞.", parse_mode='html')
                chat_id = str(message.from_user.id)
                with open('/var/www/v/data/h_tg/bz.json', 'r') as json_file:
                    a = json.load(json_file)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ "chat_id", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                a[chat_id][str(a[chat_id]["counter"])]["payed"] = True

                with open('/var/www/v/data/h_tg/bz.json', 'w', encoding='utf-8') as json_file:
                    json.dump(a, json_file, ensure_ascii=False, indent=4)
                message.text =='/start'
                return start(message)
            else:
                print("BAD RETURN")
                print(payment)
                bot.send_message(message.chat.id, "–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–ª–∞—Ç–µ–∂–æ–º. –ö–∞—Å—Å–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞ –ø—Ä–∏—ë–º.".format(message.from_user))
                print("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
                message.text =='/start'
                return start(message)
        bot.send_message(message.chat.id, "–ò—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞".format(message.from_user))
        print("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        message.text =='/start'
        return start(message)   
                 
    await check(message)
#===============================================================================================================
def jsonPut(message,listOfNames,category,lenNames,SUM):
    chat_id = str(message.from_user.id)
    # –ß—Ç–µ–Ω–∏–µ JSON-—Ñ–∞–π–ª–∞
    with open('/var/www/v/data/h_tg/bz.json', 'r') as json_file:
        a = json.load(json_file)
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ "chat_id", –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if chat_id not in a:
        a[chat_id] = {}
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞—Ä—è a[chat_id]
        a[chat_id]["counter"] = 1
        fillJSON(chat_id,a,1)

    n = a[chat_id]["counter"]

    if (a[chat_id][str(n)]["payed"] == True):
        n= n+1
        fillJSON(chat_id,a,n)
        a[chat_id]["counter"] = n

    existing_values = a[chat_id][str(n)][category].get('List', [])

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º

    print(listOfNames)
    print(existing_values)
    existing_values.extend(listOfNames)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä–µ JSON
    a[chat_id][str(n)][category]["List"] = existing_values

    a[chat_id][str(n)][category]["kolvo"]=a[chat_id][str(n)][category]["kolvo"] + lenNames
    a[chat_id][str(n)][category]["cash"]=a[chat_id][str(n)][category]["cash"] + SUM





    with open('/var/www/v/data/h_tg/bz.json', 'w', encoding='utf-8') as json_file:
        json.dump(a, json_file, ensure_ascii=False, indent=4)

#===============================================================================================================

def fillJSON(user_id,a,n):
    a[user_id][str(n)] = {}

    dir_mass = ["OZ", "OU", "PU", "PZ"]
    for i in dir_mass:
        a[user_id][str(n)][i] = {
            "List": [],
            "kolvo": 0,
            "cash": 0,
        }
    a[user_id][str(n)]["payed"] = False
    a[user_id][str(n)]["checked"] = False



#===============================================================================================================
def checkerJSON():
    with open('/var/www/v/data/h_tg/bz.json', 'r') as json_file:
        a = json.load(json_file)

    current_date = datetime.datetime.now()
    day_of_week = current_date.strftime('%A')

    for i in a:
        for j in a[i]:
            if j=="counter": continue
            if (a[i][j]["payed"] == True) and (a[i][j]["checked"] == False):
                a[i][j]["checked"] = True
    if day_of_week == 'Monday':
        keys_to_remove = []
        for key1, value1 in a.items():
            if isinstance(value1, dict):
                for key2, value2 in value1.items():
                    if isinstance(value2, dict) and value2.get('checked') == True:
                        keys_to_remove.append(key1)
                        break

        for key in keys_to_remove:
            del a[key]

    with open('/var/www/v/data/h_tg/bz.json', 'w', encoding='utf-8') as json_file:
        json.dump(a, json_file, ensure_ascii=False, indent=4)



#===============================================================================================================
bot.infinity_polling()

